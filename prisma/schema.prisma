// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  bookIssues BookIssue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id              String     @id @default(cuid())
  title           String
  author          String
  isbn            String     @unique
  rfidTag         String     @unique
  genre           BookGenre
  publicationDate DateTime
  description     String?
  coverImage      String?
  totalCopies     Int        @default(1)
  availableCopies Int        @default(1)
  status          BookStatus @default(AVAILABLE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  bookIssues BookIssue[]
}

model BookIssue {
  id         String      @id @default(cuid())
  bookId     String
  userId     String
  issueDate  DateTime    @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     IssueStatus @default(ISSUED)
  otpCode    String?
  otpExpires DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      OTPType
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum UserRole {
  ADMIN
  LIBRARIAN
  USER
}

enum BookGenre {
  FICTION
  NON_FICTION
  SCIENCE_FICTION
  MYSTERY
  ROMANCE
  THRILLER
  BIOGRAPHY
  HISTORY
  SCIENCE
  TECHNOLOGY
  PHILOSOPHY
  RELIGION
  ART
  MUSIC
  TRAVEL
  COOKING
  HEALTH
  EDUCATION
  CHILDREN
  YOUNG_ADULT
  OTHER
}

enum BookStatus {
  AVAILABLE
  ISSUED
  RESERVED
  MAINTENANCE
  LOST
}

enum IssueStatus {
  ISSUED
  RETURNED
  OVERDUE
  LOST
}

enum OTPType {
  BOOK_ISSUE
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
